version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: whatsapp_saas_prod
      POSTGRES_USER: whatsapp_saas
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whatsapp_saas"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Application
  web:
    build: .
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=whatsapp_saas_prod
      - DB_USER=whatsapp_saas
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 config.wsgi:application"

  # Celery Worker
  celery:
    build: .
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=whatsapp_saas_prod
      - DB_USER=whatsapp_saas
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: celery -A config worker --loglevel=info

  # Celery Beat Scheduler
  celerybeat:
    build: .
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=whatsapp_saas_prod
      - DB_USER=whatsapp_saas
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: celery -A config beat --loglevel=info

  # Node.js WhatsApp Service
  whatsapp:
    build: .
    working_dir: /app/whatsapp-service
    environment:
      - NODE_ENV=production
      - DJANGO_BASE_URL=${DJANGO_BASE_URL}
      - API_KEY=${NODE_SERVICE_API_KEY}
    volumes:
      - whatsapp_sessions:/app/whatsapp-service/sessions
      - logs_volume:/app/logs
    ports:
      - "3000:3000"
    restart: unless-stopped
    command: node src/server.js

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - whatsapp
    restart: unless-stopped

  # Monitoring with Flower (Celery monitoring)
  flower:
    build: .
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=whatsapp_saas_prod
      - DB_USER=whatsapp_saas
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    command: celery -A config flower --port=5555

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume:
  whatsapp_sessions:
